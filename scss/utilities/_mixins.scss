// ==========================================================================
// Mixins
// ==========================================================================

// Mixins
//include loop to add whatever class with the key/value pair in the config ui-colors
//$theme is a variable we created here to use in the loop as well as $map
@mixin bg-colors($map){
	@each $theme, $color in $map {
		&--#{$theme}{
			background-color: $color;
		}
	}	
}

@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width:$w;
	height:$h;
	display:$disp;
}

//use null as an optional placeholder - write css if a value is placed in that variable.
//for use with Hamburger icon
//example if statment + error
@mixin p-el(
    $el,
    $el-w: null,
    $el-h: null) {
    
    @if $el == "before" or $el == "after" {
      &:#{$el} {
        @extend %pseudos;
        width: $el-w;
        height: $el-h;
        @content;
      }
     }
     @else {
      @error "`#{$el}` is not a valid pseudo-element.";
     }     
}

// Bem selectors
// this adds __ to our specified class using the smacss guidelines
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

//modifier 
@mixin m($modifier) {
  &.#{$modifier} {
    @content;
  }
}

//Select all siblings but the first one inside a group of elements
//adds margin left to all but the first element
@mixin doubly($margin: 1em){
  & + & {
    margin-left:$margin;
    @content;
  }
}

//media quries
@mixin mq($screen-size) {
  @if $screen-size == "small" {
    @media (min-width: $small) and (max-width: $medium) {
      @content;
    }
  }
  @else if $screen-size == "medium" {
    @media (min-width: $medium + 1) {
      @content;
    }
  }
  @else if $screen-size == "large" {
    @media (min-width: $large){ 
      @content;
    }
  }
  @else {
    @error "Wrong break-point value for '#{$screen-size}'";
  }
}


//grid columns
@mixin g-columns {
  @for $i from 1 through $g-col-count {

  $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
  $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

  &--#{$i} {
   width: percentage($target / $context);
  }

}
}



